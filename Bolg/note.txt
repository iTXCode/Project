需求

实现一个简单的博客系统
1.只支持单个用户
2.实现针对文章的增删改查
3.实现针对标签的增删改查

模块划分
客户端:网页的形式实现
服务器:http协议
数据库:用于存储数据(MySQL)

网页端的具体展现形式
1.展现博客列表
2.展现博客详情
3.管理博客页面

当用户在客户端指向某个操作的时候,客户端就会给
服务器发送HTTP请求，请求中就包含了用户的行为
服务器根据这个行为来完成对数据的操作

设计思路
1.先设计数据库(表结构)
2.设计前后端交互接口
3.实现服务器端和客户端的逻辑

数据库设计(表设计)
1.创建一个数据库 
MariaDB 和MySQL 两种语言是基于同一语言
的两种形式
2.创建一个博客表
a.blog_id int 
b.title varchar(50)
c.content text
d.create_time varchar(50)
e.tag_id int//这篇博客属于那个标签
 MySQL 为关系数据库 
 非关系数据库：Redis

create table blog_id
(

);

 3.创建一个标签表
 a:tag_id  int 
 b.tag_name varchar(50) 
 
1>重定向(把标准输出进行重定向)
2> 标准错误重定向
<标准输入重定向

使用代码MySQL c语言 API来完成数据库操作
yum list | grep mysql

ORM　用一个对象和数据库的一张
表关联起来

ORM依赖反射/自省 语法机制

抽象:面向对象特性基础
类和对象 
封装
组合 
继承
多态
反射/自省


设计前后端的交互API
HTTP协议进行扩展,创建自定制协议


一:博客管理
1.新增博客
2.获取博客
3.获取某个博客详细内容
4.修改博客
5.删除博客

二:标签管理

1.新增标签
2.删除标签
3.查看所有标签

新增博客
1.传统的API设计方式:使用query_string
来进行信息传递
例如:GET/blog?method=inset&title=...&content=...

2.restful风格的API设计方式:使用不同的
HTTP方法来表达不同的语义

a.使用POST方法表示新增
b.使用GET方法表示查看
c.使用PUT方式表示修改
d.使用DELETE方法表示删除
e.使用path表示要操作的资源
使用path表示要操作的资源
使用json来组织body中的数据


新增博客
POST/bolg 
{
  title:xxxx
  content:xxxx
  create_time:xxxx
  tag_id:xxx
}

HTTP/1.1 200 OK
{
    ok:true
    reason:""
}